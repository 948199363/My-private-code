#关键是二叉搜索树的特性，左小右大
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        # 思路：采用递归
        if not root:
            return None
        if (root.val>p.val) and (root.val>q.val):       # 两个节点都在当前根节点左侧，则递归左子树
            return self.lowestCommonAncestor(root.left, p, q)
        elif (root.val<p.val) and (root.val<q.val):     # 两个节点都在当前根节点右侧，则递归右子树
            return self.lowestCommonAncestor(root.right, p, q)
        else:                                           # 返回树根节点
            return root
